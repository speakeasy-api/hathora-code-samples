/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as b64$ from "../../lib/base64";
import { blobLikeSchema } from "../../types";
import * as components from "../components";
import * as z from "zod";

export type FileT = {
    fileName: string;
    content: Uint8Array | string;
};

export type RunBuildRequestBody = {
    file: FileT | Blob;
};

export type RunBuildRequest = {
    buildId: number;
    requestBody: RunBuildRequestBody;
    appId?: string | undefined;
};

export type RunBuildResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Ok
     */
    res?: string | undefined;
};

/** @internal */
export namespace FileT$ {
    export type Inbound = {
        fileName: string;
        content: Uint8Array | string;
    };

    export const inboundSchema: z.ZodType<FileT, z.ZodTypeDef, Inbound> = z
        .object({
            fileName: z.string(),
            content: b64$.zodInbound,
        })
        .transform((v) => {
            return {
                fileName: v.fileName,
                content: v.content,
            };
        });

    export type Outbound = {
        fileName: string;
        content: Uint8Array;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FileT> = z
        .object({
            fileName: z.string(),
            content: b64$.zodOutbound,
        })
        .transform((v) => {
            return {
                fileName: v.fileName,
                content: v.content,
            };
        });
}

/** @internal */
export namespace RunBuildRequestBody$ {
    export type Inbound = {
        file: FileT$.Inbound;
    };

    export const inboundSchema: z.ZodType<RunBuildRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            file: z.lazy(() => FileT$.inboundSchema),
        })
        .transform((v) => {
            return {
                file: v.file,
            };
        });

    export type Outbound = {
        file: FileT$.Outbound | Blob;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunBuildRequestBody> = z
        .object({
            file: z.lazy(() => FileT$.outboundSchema).or(blobLikeSchema),
        })
        .transform((v) => {
            return {
                file: v.file,
            };
        });
}

/** @internal */
export namespace RunBuildRequest$ {
    export type Inbound = {
        buildId: number;
        RequestBody: RunBuildRequestBody$.Inbound;
        appId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<RunBuildRequest, z.ZodTypeDef, Inbound> = z
        .object({
            buildId: z.number().int(),
            RequestBody: z.lazy(() => RunBuildRequestBody$.inboundSchema),
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                buildId: v.buildId,
                requestBody: v.RequestBody,
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });

    export type Outbound = {
        buildId: number;
        RequestBody: RunBuildRequestBody$.Outbound;
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunBuildRequest> = z
        .object({
            buildId: z.number().int(),
            requestBody: z.lazy(() => RunBuildRequestBody$.outboundSchema),
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                buildId: v.buildId,
                RequestBody: v.requestBody,
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });
}

/** @internal */
export namespace RunBuildResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        res?: string | undefined;
    };

    export const inboundSchema: z.ZodType<RunBuildResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            res: z.string().optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        res?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RunBuildResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            res: z.string().optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.res === undefined ? null : { res: v.res }),
            };
        });
}
