/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetLatestProcessesRequest = {
    appId?: string | undefined;
    status?: Array<components.ProcessStatus> | undefined;
    region?: Array<components.Region> | undefined;
};

export type GetLatestProcessesResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Ok
     */
    processV2s?: Array<components.ProcessV2> | undefined;
};

/** @internal */
export namespace GetLatestProcessesRequest$ {
    export type Inbound = {
        appId?: string | undefined;
        status?: Array<components.ProcessStatus> | undefined;
        region?: Array<components.Region> | undefined;
    };

    export const inboundSchema: z.ZodType<GetLatestProcessesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            appId: z.string().optional(),
            status: z.array(components.ProcessStatus$).optional(),
            region: z.array(components.Region$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.region === undefined ? null : { region: v.region }),
            };
        });

    export type Outbound = {
        appId?: string | undefined;
        status?: Array<components.ProcessStatus> | undefined;
        region?: Array<components.Region> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLatestProcessesRequest> = z
        .object({
            appId: z.string().optional(),
            status: z.array(components.ProcessStatus$).optional(),
            region: z.array(components.Region$).optional(),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.region === undefined ? null : { region: v.region }),
            };
        });
}

/** @internal */
export namespace GetLatestProcessesResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        ProcessV2s?: Array<components.ProcessV2$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetLatestProcessesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            ProcessV2s: z.array(components.ProcessV2$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.ProcessV2s === undefined ? null : { processV2s: v.ProcessV2s }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        ProcessV2s?: Array<components.ProcessV2$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLatestProcessesResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            processV2s: z.array(components.ProcessV2$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.processV2s === undefined ? null : { ProcessV2s: v.processV2s }),
            };
        });
}
