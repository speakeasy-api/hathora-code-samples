/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type RevokeOrgTokenRequest = {
    orgId: string;
    orgTokenId: string;
};

export type RevokeOrgTokenResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Ok
     */
    boolean?: boolean | undefined;
};

/** @internal */
export namespace RevokeOrgTokenRequest$ {
    export type Inbound = {
        orgId: string;
        orgTokenId: string;
    };

    export const inboundSchema: z.ZodType<RevokeOrgTokenRequest, z.ZodTypeDef, Inbound> = z
        .object({
            orgId: z.string(),
            orgTokenId: z.string(),
        })
        .transform((v) => {
            return {
                orgId: v.orgId,
                orgTokenId: v.orgTokenId,
            };
        });

    export type Outbound = {
        orgId: string;
        orgTokenId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RevokeOrgTokenRequest> = z
        .object({
            orgId: z.string(),
            orgTokenId: z.string(),
        })
        .transform((v) => {
            return {
                orgId: v.orgId,
                orgTokenId: v.orgTokenId,
            };
        });
}

/** @internal */
export namespace RevokeOrgTokenResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        boolean?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<RevokeOrgTokenResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            boolean: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.boolean === undefined ? null : { boolean: v.boolean }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        boolean?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RevokeOrgTokenResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            boolean: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.boolean === undefined ? null : { boolean: v.boolean }),
            };
        });
}
