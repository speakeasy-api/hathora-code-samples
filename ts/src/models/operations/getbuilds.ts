/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetBuildsRequest = {
    appId?: string | undefined;
};

export type GetBuildsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Ok
     */
    builds?: Array<components.Build> | undefined;
};

/** @internal */
export namespace GetBuildsRequest$ {
    export type Inbound = {
        appId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetBuildsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });

    export type Outbound = {
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBuildsRequest> = z
        .object({
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });
}

/** @internal */
export namespace GetBuildsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Builds?: Array<components.Build$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetBuildsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Builds: z.array(components.Build$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Builds === undefined ? null : { builds: v.Builds }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Builds?: Array<components.Build$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetBuildsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            builds: z.array(components.Build$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.builds === undefined ? null : { Builds: v.builds }),
            };
        });
}
