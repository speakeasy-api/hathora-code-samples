/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreateBuildRequest = {
    createBuildParams: components.CreateBuildParams;
    appId?: string | undefined;
};

export type CreateBuildResponse = {
    httpMeta: components.HTTPMetadata;
    build?: components.Build | undefined;
};

/** @internal */
export namespace CreateBuildRequest$ {
    export type Inbound = {
        CreateBuildParams: components.CreateBuildParams$.Inbound;
        appId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateBuildRequest, z.ZodTypeDef, Inbound> = z
        .object({
            CreateBuildParams: components.CreateBuildParams$.inboundSchema,
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                createBuildParams: v.CreateBuildParams,
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });

    export type Outbound = {
        CreateBuildParams: components.CreateBuildParams$.Outbound;
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateBuildRequest> = z
        .object({
            createBuildParams: components.CreateBuildParams$.outboundSchema,
            appId: z.string().optional(),
        })
        .transform((v) => {
            return {
                CreateBuildParams: v.createBuildParams,
                ...(v.appId === undefined ? null : { appId: v.appId }),
            };
        });
}

/** @internal */
export namespace CreateBuildResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Build?: components.Build$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateBuildResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Build: components.Build$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Build === undefined ? null : { build: v.Build }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Build?: components.Build$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateBuildResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            build: components.Build$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.build === undefined ? null : { Build: v.build }),
            };
        });
}
