/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetInvoicesResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Ok
     */
    invoices?: Array<components.Invoice> | undefined;
};

/** @internal */
export namespace GetInvoicesResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Invoices?: Array<components.Invoice$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetInvoicesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Invoices: z.array(components.Invoice$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Invoices === undefined ? null : { invoices: v.Invoices }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Invoices?: Array<components.Invoice$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetInvoicesResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            invoices: z.array(components.Invoice$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.invoices === undefined ? null : { Invoices: v.invoices }),
            };
        });
}
