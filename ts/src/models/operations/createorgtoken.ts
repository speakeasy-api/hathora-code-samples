/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreateOrgTokenRequest = {
    orgId: string;
    createOrgToken: components.CreateOrgToken;
};

export type CreateOrgTokenResponse = {
    httpMeta: components.HTTPMetadata;
    createdOrgToken?: components.CreatedOrgToken | undefined;
};

/** @internal */
export namespace CreateOrgTokenRequest$ {
    export type Inbound = {
        orgId: string;
        CreateOrgToken: components.CreateOrgToken$.Inbound;
    };

    export const inboundSchema: z.ZodType<CreateOrgTokenRequest, z.ZodTypeDef, Inbound> = z
        .object({
            orgId: z.string(),
            CreateOrgToken: z.lazy(() => components.CreateOrgToken$.inboundSchema),
        })
        .transform((v) => {
            return {
                orgId: v.orgId,
                createOrgToken: v.CreateOrgToken,
            };
        });

    export type Outbound = {
        orgId: string;
        CreateOrgToken: components.CreateOrgToken$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrgTokenRequest> = z
        .object({
            orgId: z.string(),
            createOrgToken: z.lazy(() => components.CreateOrgToken$.outboundSchema),
        })
        .transform((v) => {
            return {
                orgId: v.orgId,
                CreateOrgToken: v.createOrgToken,
            };
        });
}

/** @internal */
export namespace CreateOrgTokenResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        CreatedOrgToken?: components.CreatedOrgToken$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateOrgTokenResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            CreatedOrgToken: components.CreatedOrgToken$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.CreatedOrgToken === undefined
                    ? null
                    : { createdOrgToken: v.CreatedOrgToken }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        CreatedOrgToken?: components.CreatedOrgToken$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrgTokenResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            createdOrgToken: components.CreatedOrgToken$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.createdOrgToken === undefined
                    ? null
                    : { CreatedOrgToken: v.createdOrgToken }),
            };
        });
}
