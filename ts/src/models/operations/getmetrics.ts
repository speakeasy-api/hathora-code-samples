/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetMetricsRequest = {
    appId?: string | undefined;
    processId: string;
    /**
     * Available metrics to query over time.
     */
    metrics?: Array<components.MetricName> | undefined;
    /**
     * Unix timestamp. Default is current time.
     */
    end?: number | undefined;
    /**
     * Unix timestamp. Default is -1 hour from `end`.
     */
    start?: number | undefined;
    step?: number | undefined;
};

export type GetMetricsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Ok
     */
    metricsResponse?: components.MetricsResponse | undefined;
};

/** @internal */
export namespace GetMetricsRequest$ {
    export type Inbound = {
        appId?: string | undefined;
        processId: string;
        metrics?: Array<components.MetricName> | undefined;
        end?: number | undefined;
        start?: number | undefined;
        step?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetMetricsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            appId: z.string().optional(),
            processId: z.string(),
            metrics: z.array(components.MetricName$).optional(),
            end: z.number().optional(),
            start: z.number().optional(),
            step: z.number().int().default(60),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
                processId: v.processId,
                ...(v.metrics === undefined ? null : { metrics: v.metrics }),
                ...(v.end === undefined ? null : { end: v.end }),
                ...(v.start === undefined ? null : { start: v.start }),
                step: v.step,
            };
        });

    export type Outbound = {
        appId?: string | undefined;
        processId: string;
        metrics?: Array<components.MetricName> | undefined;
        end?: number | undefined;
        start?: number | undefined;
        step: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetricsRequest> = z
        .object({
            appId: z.string().optional(),
            processId: z.string(),
            metrics: z.array(components.MetricName$).optional(),
            end: z.number().optional(),
            start: z.number().optional(),
            step: z.number().int().default(60),
        })
        .transform((v) => {
            return {
                ...(v.appId === undefined ? null : { appId: v.appId }),
                processId: v.processId,
                ...(v.metrics === undefined ? null : { metrics: v.metrics }),
                ...(v.end === undefined ? null : { end: v.end }),
                ...(v.start === undefined ? null : { start: v.start }),
                step: v.step,
            };
        });
}

/** @internal */
export namespace GetMetricsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        MetricsResponse?: components.MetricsResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetMetricsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            MetricsResponse: components.MetricsResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.MetricsResponse === undefined
                    ? null
                    : { metricsResponse: v.MetricsResponse }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        MetricsResponse?: components.MetricsResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetricsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            metricsResponse: components.MetricsResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.metricsResponse === undefined
                    ? null
                    : { MetricsResponse: v.metricsResponse }),
            };
        });
}
