/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum StartingConnectionInfoStatus {
    Starting = "starting",
}

export type StartingConnectionInfo = {
    status: StartingConnectionInfoStatus;
    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     *
     * @remarks
     * Note: error will be returned if `roomId` is not globally unique.
     */
    roomId: string;
};

/** @internal */
export const StartingConnectionInfoStatus$ = z.nativeEnum(StartingConnectionInfoStatus);

/** @internal */
export namespace StartingConnectionInfo$ {
    export type Inbound = {
        status: StartingConnectionInfoStatus;
        roomId: string;
    };

    export const inboundSchema: z.ZodType<StartingConnectionInfo, z.ZodTypeDef, Inbound> = z
        .object({
            status: StartingConnectionInfoStatus$,
            roomId: z.string(),
        })
        .transform((v) => {
            return {
                status: v.status,
                roomId: v.roomId,
            };
        });

    export type Outbound = {
        status: StartingConnectionInfoStatus;
        roomId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StartingConnectionInfo> = z
        .object({
            status: StartingConnectionInfoStatus$,
            roomId: z.string(),
        })
        .transform((v) => {
            return {
                status: v.status,
                roomId: v.roomId,
            };
        });
}
