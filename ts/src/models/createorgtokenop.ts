/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CreatedOrgToken, CreatedOrgToken$ } from "./createdorgtoken";
import { CreateOrgToken, CreateOrgToken$ } from "./createorgtoken";
import * as z from "zod";

export type CreateOrgTokenRequest = {
    createOrgToken: CreateOrgToken;
    orgId: string;
};

export type CreateOrgTokenResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    createdOrgToken?: CreatedOrgToken | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace CreateOrgTokenRequest$ {
    export type Inbound = {
        CreateOrgToken: CreateOrgToken$.Inbound;
        orgId: string;
    };

    export const inboundSchema: z.ZodType<CreateOrgTokenRequest, z.ZodTypeDef, Inbound> = z
        .object({
            CreateOrgToken: CreateOrgToken$.inboundSchema,
            orgId: z.string(),
        })
        .transform((v) => {
            return {
                createOrgToken: v.CreateOrgToken,
                orgId: v.orgId,
            };
        });

    export type Outbound = {
        CreateOrgToken: CreateOrgToken$.Outbound;
        orgId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrgTokenRequest> = z
        .object({
            createOrgToken: CreateOrgToken$.outboundSchema,
            orgId: z.string(),
        })
        .transform((v) => {
            return {
                CreateOrgToken: v.createOrgToken,
                orgId: v.orgId,
            };
        });
}

/** @internal */
export namespace CreateOrgTokenResponse$ {
    export type Inbound = {
        ContentType: string;
        CreatedOrgToken?: CreatedOrgToken$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateOrgTokenResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            CreatedOrgToken: CreatedOrgToken$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.CreatedOrgToken === undefined
                    ? null
                    : { createdOrgToken: v.CreatedOrgToken }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        CreatedOrgToken?: CreatedOrgToken$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateOrgTokenResponse> = z
        .object({
            contentType: z.string(),
            createdOrgToken: CreatedOrgToken$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.createdOrgToken === undefined
                    ? null
                    : { CreatedOrgToken: v.createdOrgToken }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
