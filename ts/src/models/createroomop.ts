/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CreateRoomParams, CreateRoomParams$ } from "./createroomparams";
import { CreateRoomResponse, CreateRoomResponse$ } from "./createroomresponse";
import * as z from "zod";

export type CreateRoomRequest = {
    createRoomParams: CreateRoomParams;
    appId?: string | undefined;
    roomId?: string | undefined;
};

export type CreateRoomResponse1 = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    createRoomResponse?: CreateRoomResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace CreateRoomRequest$ {
    export type Inbound = {
        CreateRoomParams: CreateRoomParams$.Inbound;
        appId?: string | undefined;
        roomId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateRoomRequest, z.ZodTypeDef, Inbound> = z
        .object({
            CreateRoomParams: CreateRoomParams$.inboundSchema,
            appId: z.string().optional(),
            roomId: z.string().optional(),
        })
        .transform((v) => {
            return {
                createRoomParams: v.CreateRoomParams,
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.roomId === undefined ? null : { roomId: v.roomId }),
            };
        });

    export type Outbound = {
        CreateRoomParams: CreateRoomParams$.Outbound;
        appId?: string | undefined;
        roomId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateRoomRequest> = z
        .object({
            createRoomParams: CreateRoomParams$.outboundSchema,
            appId: z.string().optional(),
            roomId: z.string().optional(),
        })
        .transform((v) => {
            return {
                CreateRoomParams: v.createRoomParams,
                ...(v.appId === undefined ? null : { appId: v.appId }),
                ...(v.roomId === undefined ? null : { roomId: v.roomId }),
            };
        });
}

/** @internal */
export namespace CreateRoomResponse1$ {
    export type Inbound = {
        ContentType: string;
        CreateRoomResponse?: CreateRoomResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateRoomResponse1, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            CreateRoomResponse: CreateRoomResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.CreateRoomResponse === undefined
                    ? null
                    : { createRoomResponse: v.CreateRoomResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        CreateRoomResponse?: CreateRoomResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateRoomResponse1> = z
        .object({
            contentType: z.string(),
            createRoomResponse: CreateRoomResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.createRoomResponse === undefined
                    ? null
                    : { CreateRoomResponse: v.createRoomResponse }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
