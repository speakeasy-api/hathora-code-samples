/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ListOrgTokens, ListOrgTokens$ } from "./listorgtokens";
import * as z from "zod";

export type GetOrgTokensRequest = {
    orgId: string;
};

export type GetOrgTokensResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Ok
     */
    listOrgTokens?: ListOrgTokens | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetOrgTokensRequest$ {
    export type Inbound = {
        orgId: string;
    };

    export const inboundSchema: z.ZodType<GetOrgTokensRequest, z.ZodTypeDef, Inbound> = z
        .object({
            orgId: z.string(),
        })
        .transform((v) => {
            return {
                orgId: v.orgId,
            };
        });

    export type Outbound = {
        orgId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrgTokensRequest> = z
        .object({
            orgId: z.string(),
        })
        .transform((v) => {
            return {
                orgId: v.orgId,
            };
        });
}

/** @internal */
export namespace GetOrgTokensResponse$ {
    export type Inbound = {
        ContentType: string;
        ListOrgTokens?: ListOrgTokens$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetOrgTokensResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            ListOrgTokens: ListOrgTokens$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.ListOrgTokens === undefined ? null : { listOrgTokens: v.ListOrgTokens }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        ListOrgTokens?: ListOrgTokens$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrgTokensResponse> = z
        .object({
            contentType: z.string(),
            listOrgTokens: ListOrgTokens$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.listOrgTokens === undefined ? null : { ListOrgTokens: v.listOrgTokens }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
